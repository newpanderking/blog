---
layout: post
title:  "Java 8 新特性"
date: 2019-09-20
categories: 技术
tags: java
description: Java 8 新特性
---

## 一、函数式接口
> 函数式接口是指仅仅只包括一个抽象方法，但是可以有多个非抽象方法的接口。像这样的方法可以被隐式的转换为lambda表达式。Java 8 增加了一种特殊的注解`@FunctionalInterface`, 但是这个注解通常不是必须的，只要接口只包含一个抽象方法，虚拟机会自动判断该接口为函数式接口。一般建议在接口上使用`@FunctionalInterface`注解进行生命，这样的话，编译器如果发现了这个注解的接口有多于一个抽象方法的时候就会报错。

- 大多数函数式接口都不用我们自己编写，Java8都给我们实现好了，这些接口都在`java.util.function`包里。 

## 二、内置的函数式接口
- `Predicates`：只有一个参数的返回布尔类型的断言型接口。
- `Functions`：接受一个参数并生成结果。 
- `Suppliers`：产生给定泛型类型的结果， 与Function接口不同，Supplier接口不接受参数。
- `Consumers`：表示对单个输入参数执行操作。
- `Comparators`：标记接口。
- `Optionals`：Optionals不是函数式接口，而是用于防止`NullPointerException`的工具。


## 三、Streams流
- `Filter`：过滤，通过一个predicate接口来过滤并只保留符合条件的元素，该操作属于中间操作，因此对于过滤后的结果需要使用其他的Stream操作。
- `Sorted`：排序，排序也是一个中间操作，排序之后返回的是stream。如果不指定一个自定义的Comparator则会使用默认排序。
- `Map`：映射，中间操作map会将元素根据指定的Function接口来依次将元素转换成另外的对象。
- `Match`：匹配，Stream提供了多种匹配操作，允许检测指定的Predicate是否匹配整个Stream。所有的匹配操作都是最终操作，返回一个boolean类型的值。
	- `anyMatch`
	- `allMatch`
	- `noneMatch`
- `Count`：计数，一个最终操作，返回类型是long。
- `Reduce`：规约，这是一个最终操作，允许通过指定的函数来将Stream中的多个元素规约为一个元素，规约后的结果是通过Optional接收。

## 四、并行流
> Stream有串行和并行两种，串行Stream上的操作是在一个线程中依次完成，而并行Stream则是在多个线程上同时执行。

- 串行流：`values.stream().sorted().count();`
- 并行流：`values.parallelStream().sorted().count();`