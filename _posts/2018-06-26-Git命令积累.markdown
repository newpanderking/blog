---
layout: post
title:  "Git命令积累"
date:   2018-06-26 11:39:34
categories: GIT
tags: git
description: git的一些常用命令总结，优选的博客，revert&reset区别
---

### git博客

*  [`git Merge`原理算法](https://www.atatech.org/articles/85517/?flag_data_from=mail_daily_recommend&uid=154586)
*  [廖雪峰git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)

### git命令

|命令|描述|
|---|---|
|git init| git仓库初始化|
|git config user.name "userName"|配置用户名|
|git config user.email "xxx@xx.xx"| 配置用户邮箱|
|git status|查看git状态|
|git add|添加至缓冲区|
|git commit -m "message"|提交到本地仓库|
|git diff|工作区与缓冲区的差异|
|git diff --cached|缓冲区与版本库的差异|
|git diff HEAD|版本库与缓冲区的差异|
|git stash save "message"|会把所有未提交的修改都保存起来|
|git stash pop|恢复之前缓存的工作目录|
|git stash list|罗列之前缓存的工作目录|
|git stash clear|清除缓存|
|git stash drop|移除stash|
|git stash show|查看指定的stash|
|git branch -a| 显示本地分支和远程分支|
|git branch -r| 显示远程分支|
|git branch -d branchName| 删除本地分支|
|git checkout branchName| 切换分支branchName|
|git checkout -b branchName| 切换分支branchName, 没有则创建branchName|
|git checkout -b branchName remoteBranch| 切换分支branchName, 没有则创建branchName, 同时关联远程分支remoteBranch|
|git branch --set-upstream-to origin/remote-branch mybranch| 关联本地分支mybranch到远程分支release_risktemplate_S9601992_20170613 |
|git push --set-upstream origin jason-branch | 将本地分支推送远程分支，远程分支名字为`jason-branch`|
|git push origin myBranch|本地分支和远程分支名字相同myBranch,可以直接push|
|git push origin HEAD:myBranch1|本地分支和远程分支名字不同，假如远程分支名字为myBranch1|
|git push --delete origin remote-branch|删除远程分支 remote-branch|
|echo "*.log" >> `.gitignore` | `*.log` 文件忽略，追加到 `.gitignore`文件末尾|


### **`git revert` PK `git reset`**
#### `git revert`
* `git revert HEAD` 撤销前一次commit
* `git revert HEAD^` 撤销前前一次commit
* `git revert commit(fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff)` 撤销指定版本提交
#### `git reset` 
* `git reset --mixed` 默认方式，不带任何参数的git reset,回退到某个版本，只保留源码到工作区。
* `git reset --soft` 回退到某个版本，只回退了commit的信息，更改信息保留至缓冲区。
* `git reset  --hard` 彻底回退到某个版本，本地的源码也会变为上一个版本的内容，此命令 慎用！

#### 区别
* `git revert`是用一次新的commit来回滚之前的commit，	`git reset`	是直接删除指定的commit。
* 在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为`git revert`是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。
* `git reset`是把HEAD向后移动了一下，而`git revert`是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。



