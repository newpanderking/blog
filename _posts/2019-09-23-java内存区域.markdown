---
layout: post
title:  "Java 内存区域"
date: 2019-09-20
categories: 技术
tags: java
description: Java 内存区域
---

## 一、运行时数据区域
> JDK1.8和之前的版本略有不同

### JDK1.8之前
![]({{ "/assets/img4post/2019-09-23-java内存区域-JVM运行时数据区域内存图1.8之前.png" | absolute_url }})

### JDK1.8
![]({{ "/assets/img4post/2019-09-23-java内存区域-JVM运行时数据区域内存图1.8.png" | absolute_url }})

#### 线程私有
- 程序计数器
- 虚拟机栈
- 本地方法栈

#### 线程共享
- 堆
- 方法区
- 直接内存

### 程序计数器
> 程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。另外、为了线程切换后能够恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，各个线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。
PS: 程序计数器是唯一一个不会出现OutOfMemoryError的内存区域，它的生命周期随着线程的创建而创建，随着线程的消亡而消亡。

### 虚拟机栈
> 与程序计数器一样，Java虚拟机栈也是线程私有的，他的生命周期和线程相同，描述的是java方法执行的内存模型，每次方法调用的数据都是通过栈传递的。Java的内存可以粗糙的分为堆内存和栈内存，其中栈内存就是我们所指的虚拟机栈，或者说虚拟机栈中局部变量表部分。局部变量表主要存放了编译器可知的各种数据类型、对象引用。

- Java虚拟机栈会出现两种错误，`StackOverFlowError` 和 `OutOfMemoryError`。
	- `StackOverFlowError`: 若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度时，就会抛出`StackOverFlowError`。
	- `OutOfMemoryError`: 若Java虚拟机栈的内存大小允许动态扩展，且当线程请求栈空间时，内存用完了，无法再动态扩展，此时就会抛出`OutOfMemoryError`。

### 
	

