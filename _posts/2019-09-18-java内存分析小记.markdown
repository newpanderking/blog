---
layout: post
title:  "Java 内存&线程分析工具"
date: 2019-09-18
categories: 技术
tags: jvm java
description: java 内存&线程分析小记
---

##  java 内存&线程分析工具

### 1、服务器上通过命令行分析线程
#### 1.1 查找java进程
- `ps -aux | grep java`  或者 `top`

```
 PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 14439 admin     20   0 8206m 5.3g 8320 S 145.6 66.2  62:43.18 java
```
#### 1.2 查找java最耗费cpu的线程

- 'top -p 14439 -H' 默认是按照cpu消耗比例进行排序，找到最高的一个PID, 如下日志所示，14481为目前最耗cpu的线程。

```

   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 113982 admin     20   0 8194m 5.3g 9732 S  99.3 66.2   0:14.81 java
 14439 admin     20   0 8194m 5.3g 9732 S  0.0 66.2   0:00.00 java
 14440 admin     20   0 8194m 5.3g 9732 S  0.0 66.2   0:01.54 java
```

#### 1.3 线程dump
- `jstack 14439  > stack.log`

#### 1.4 从stack.log中根据最耗cpu的线程查看线程堆栈，确认当前线程在做的事情

- 执行`printf "%x" 113982` 将值转换为 16进制的数字: `1bd3e`
- 执行`grep '1bd3e' stack.log` 查看线程的内容, 其中的nid就是线程id 为16进制数字，与我们执行top命令看到的10进制数字113982是对应的。

```
"RMI TCP Connection(851)-30.55.192.209" #138874 daemon prio=5 os_prio=0 tid=0x00007f3efad96000 nid=0x1bd3e runnable [0x00007f3ebe9f4000]
```
#### 1.5 分析线程

### 2、服务器上通过命令进行堆dump
#### 2.1 堆dump
- `jmap -dump:live,format=b,file=heap-dump.bin 14439`

#### 2.2 分析dump
- 2.2.1 通过命令分析：`jhat heap-dump.bin`, 

```
Snapshot resolved.
Started HTTP server on port 7000
Server is ready.
```
直接访问：`localhost:7000`即可， 不过展示的文件不够友好，不利于分析，不建议使用，建议使用工具。

- 2.2.2 通过 visual vm导入堆dump文件分析

### 3、jstat命令详解

- 1、`jstat –class <pid>` : 显示加载class的数量，及所占空间等信息。
> Loaded 装载的类的数量 Bytes 装载类所占用的字节数 Unloaded 卸载类的数量 Bytes 卸载类的字节数 Time 装载和卸载类所花费的时间

- 2、`jstat -compiler <pid>`显示VM实时编译的数量等信息。
> Compiled 编译任务执行数量 Failed 编译任务执行失败数量 Invalid 编译任务执行失效数量 Time 编译任务消耗时间 FailedType 最后一个编译失败任务的类型 FailedMethod 最后一个编译失败任务所在的类及方法

- 3、`jstat -gc <pid>`: 可以显示gc的信息，查看gc的次数，及时间。
> S0C 年轻代中第一个survivor（幸存区）的容量 (字节) S1C 年轻代中第二个survivor（幸存区）的容量 (字节) S0U 年轻代中第一个survivor（幸存区）目前已使用空间 (字节) S1U 年轻代中第二个survivor（幸存区）目前已使用空间 (字节) EC 年轻代中Eden（伊甸园）的容量 (字节) EU 年轻代中Eden（伊甸园）目前已使用空间 (字节) OC Old代的容量 (字节) OU Old代目前已使用空间 (字节) PC Perm(持久代)的容量 (字节) PU Perm(持久代)目前已使用空间 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 YGCT 从应用程序启动到采样时年轻代中gc所用时间(s) FGC 从应用程序启动到采样时old代(全gc)gc次数 FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s) GCT 从应用程序启动到采样时gc用的总时间(s)

- 4、`jstat -gccapacity <pid>`:可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小
> NGCMN 年轻代(young)中初始化(最小)的大小(字节) NGCMX 年轻代(young)的最大容量 (字节) NGC 年轻代(young)中当前的容量 (字节) S0C 年轻代中第一个survivor（幸存区）的容量 (字节) S1C 年轻代中第二个survivor（幸存区）的容量 (字节) EC 年轻代中Eden（伊甸园）的容量 (字节) OGCMN old代中初始化(最小)的大小 (字节) OGCMX old代的最大容量(字节) OGC old代当前新生成的容量 (字节) OC Old代的容量 (字节) PGCMN perm代中初始化(最小)的大小 (字节) PGCMX perm代的最大容量 (字节)
PGC perm代当前新生成的容量 (字节) PC Perm(持久代)的容量 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 FGC 从应用程序启动到采样时old代(全gc)gc次数

- 5、`jstat -gcutil <pid>`:统计gc信息
> S0 年轻代中第一个survivor（幸存区）已使用的占当前容量百分比 S1 年轻代中第二个survivor（幸存区）已使用的占当前容量百分比 E 年轻代中Eden（伊甸园）已使用的占当前容量百分比 O old代已使用的占当前容量百分比 P perm代已使用的占当前容量百分比 YGC 从应用程序启动到采样时年轻代中gc次数 YGCT 从应用程序启动到采样时年轻代中gc所用时间(s) FGC 从应用程序启动到采样时old代(全gc)gc次数 FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s) GCT 从应用程序启动到采样时gc用的总时间(s)

- 6、`jstat -gcnew <pid>`:年轻代对象的信息。
> S0C 年轻代中第一个survivor（幸存区）的容量 (字节) S1C 年轻代中第二个survivor（幸存区）的容量 (字节) S0U 年轻代中第一个survivor（幸存区）目前已使用空间 (字节) S1U 年轻代中第二个survivor（幸存区）目前已使用空间 (字节) TT 持有次数限制 MTT 最大持有次数限制 EC 年轻代中Eden（伊甸园）的容量 (字节) EU 年轻代中Eden（伊甸园）目前已使用空间 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 YGCT 从应用程序启动到采样时年轻代中gc所用时间(s)

- 7、`jstat -gcnewcapacity <pid>`: 年轻代对象的信息及其占用量。
> NGCMN 年轻代(young)中初始化(最小)的大小(字节) NGCMX 年轻代(young)的最大容量 (字节) NGC 年轻代(young)中当前的容量 (字节) S0CMX 年轻代中第一个survivor（幸存区）的最大容量 (字节) S0C 年轻代中第一个survivor（幸存区）的容量 (字节) S1CMX 年轻代中第二个survivor（幸存区）的最大容量 (字节) S1C 年轻代中第二个survivor（幸存区）的容量 (字节) ECMX 年轻代中Eden（伊甸园）的最大容量 (字节) EC 年轻代中Eden（伊甸园）的容量 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 FGC 从应用程序启动到采样时old代(全gc)gc次数

- 8、`jstat -gcold <pid>`：old代对象的信息。
> PC Perm(持久代)的容量 (字节) PU Perm(持久代)目前已使用空间 (字节) OC Old代的容量 (字节) OU Old代目前已使用空间 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 FGC 从应用程序启动到采样时old代(全gc)gc次数 FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s) GCT 从应用程序启动到采样时gc用的总时间(s)

- 9、`jstat -gcoldcapacity <pid>`: old代对象的信息及其占用量。
> OGCMN old代中初始化(最小)的大小 (字节) OGCMX old代的最大容量(字节) OGC old代当前新生成的容量 (字节) OC Old代的容量 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 FGC 从应用程序启动到采样时old代(全gc)gc次数 FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s) GCT 从应用程序启动到采样时gc用的总时间(s)

- 10、`jstat -gcpermcapacity <pid>`: perm对象的信息及其占用量。
> PGCMN perm代中初始化(最小)的大小 (字节) PGCMX perm代的最大容量 (字节)
PGC perm代当前新生成的容量 (字节) PC Perm(持久代)的容量 (字节) YGC 从应用程序启动到采样时年轻代中gc次数 FGC 从应用程序启动到采样时old代(全gc)gc次数 FGCT 从应用程序启动到采样时old代(全gc)gc所用时间(s) GCT 从应用程序启动到采样时gc用的总时间(s)

- 11、`jstat -printcompilation <pid>`：当前VM执行的信息。
> Compiled 编译任务的数目 Size 方法生成的字节码的大小 Type 编译类型 Method 类名和方法名用来标识编译的方法。类名使用/做为一个命名空间分隔符。方法名是给定类中的方法。上述格式是由-XX:+PrintComplation选项进行设置的



